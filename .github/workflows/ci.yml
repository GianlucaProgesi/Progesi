name: CI

on:
  push:
    branches:
      - main
      - master
      - develop
      - chore/**
      - release/**
  pull_request:
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-test:
    name: build-test
    runs-on: windows-latest
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.slnf', '**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Choose build target (prefer .slnf, then .sln)
        id: sln
        shell: pwsh
        run: |
          $slnf = Get-ChildItem -Recurse -Filter *.slnf | Select-Object -First 1
          if ($slnf) { "path=$($slnf.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append; exit 0 }
          $sln = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
          if ($sln)  { "path=$($sln.FullName)"  | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append; exit 0 }
          Write-Error "Nessun file .slnf o .sln trovato"

      - name: Restore (solution)
        shell: pwsh
        run: |
          $path = "${{ steps.sln.outputs.path }}"
          $hasLock = @(Get-ChildItem -Recurse -Filter packages.lock.json).Count -gt 0
          if ($hasLock) { dotnet restore "$path" --locked-mode } else { dotnet restore "$path" }

      - name: Verify whitespace formatting
        shell: pwsh
        run: |
          dotnet format whitespace "${{ steps.sln.outputs.path }}" --verify-no-changes

      - name: Build (solution)
        run: dotnet build "${{ steps.sln.outputs.path }}" -c Release --no-restore

      - name: Test (solution) + coverage
        shell: pwsh
        run: |
          $results = "TestResults"
          New-Item -ItemType Directory -Force -Path $results | Out-Null
          dotnet test "${{ steps.sln.outputs.path }}" -c Release --no-build `
            --logger "trx;LogFileName=test.trx" --results-directory $results `
            --collect:"XPlat Code Coverage"

      - name: Locate test & coverage files (debug)
        if: always()
        shell: pwsh
        run: |
          Write-Host "Listing TestResults:"
          Get-ChildItem -Recurse TestResults | ForEach-Object { Write-Host $_.FullName }
          Write-Host "Listing coverage.cobertura.xml:"
          Get-ChildItem -Recurse -Filter coverage.cobertura.xml | ForEach-Object { Write-Host $_.FullName }

      - name: Guardrail — fail if no tests executed
        shell: pwsh
        run: |
          $trx = Get-ChildItem -Recurse -Path "TestResults" -Filter "*.trx" -ErrorAction SilentlyContinue
          if (-not $trx) { Write-Error "Nessun file .trx trovato: sembra non siano stati eseguiti test."; exit 1 }
          $trx | ForEach-Object { Write-Host ("Found TRX: " + $_.FullName) }

      - name: Generate coverage reports
        if: always()
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: "**/TestResults/**/coverage.cobertura.xml"
          targetdir: "CoverageReport"
          reporttypes: "HtmlInline_AzurePipelines;Cobertura;TextSummary"
          historydir: "CoverageHistory"
        continue-on-error: true

      - name: Print coverage summary
        if: always()
        shell: pwsh
        run: |
          $summary = Get-ChildItem -Recurse -Filter 'Summary.txt' -Path 'CoverageReport' | Select-Object -First 1
          if ($summary) {
            Write-Host '===== Code Coverage Summary ====='
            Get-Content $summary.FullName | Write-Host
            if ($env:GITHUB_STEP_SUMMARY) {
              '## Code Coverage Summary' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
              '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
              Get-Content $summary.FullName | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
              '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
            }
          } else {
            Write-Host 'No TextSummary found.'
          }

      - name: Upload CoverageReport artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: CoverageReport
          if-no-files-found: warn

      - name: Upload TestResults artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: TestResults
          if-no-files-found: warn
