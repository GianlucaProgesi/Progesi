name: CI
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-test:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore .\Progesi.sln

      - name: Build (Release)
        run: dotnet build .\Progesi.sln -c Release --no-restore

      - name: Test with coverage
        run: >
          dotnet test .\tests\ProgesiRepositories.Sqlite.Tests\ProgesiRepositories.Sqlite.Tests.csproj
          -c Release --no-build
          --collect:"XPlat Code Coverage"
          --results-directory .\TestResults

      - name: Generate coverage report (HTML + summary)
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: 'TestResults/**/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'HtmlInline;TextSummary;Cobertura'

      - name: Show coverage summary
        shell: pwsh
        run: Get-Content CoverageReport/Summary.txt | Write-Output

      # (opzionale) applica una soglia minima di copertura
      - name: Enforce minimum coverage (>= 70%)
        if: always()
        shell: pwsh
        run: |
          $summary = Get-Content CoverageReport/Summary.txt -Raw
          if ($summary -match 'Line coverage:\s+([0-9\.]+)%') {
            $pct = [double]$matches[1]
            Write-Host "Detected line coverage: $pct %"
            if ($pct -lt 70) { throw "Coverage $pct% is below threshold 70%" }
          } else {
            throw "Cannot parse coverage summary"
          }

      - name: Upload Coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: CoverageReport
