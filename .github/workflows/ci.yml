name: CI

on:
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run tests (true/false)"
        required: false
        default: "true"
      collect_coverage:
        description: "Collect coverage (true/false)"
        required: false
        default: "true"
  push:
    branches: [ main ]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
  pull_request:
jobs:
  build-test:
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            6.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      # Trova solo i progetti SDK-style ed esclude Rhino/Grasshopper
      - name: Discover SDK-style projects (exclude Rhino/Grasshopper)
        shell: pwsh
        run: |
          $projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object {
            try {
              $xml = [xml](Get-Content $_.FullName)
              $isSdk = $xml.Project.Sdk -ne $null
              $notRhino = $_.FullName -notmatch 'Rhino|Grasshopper'
              return $isSdk -and $notRhino
            } catch { return $false }
          } | Select-Object -ExpandProperty FullName
          if (-not $projects) { throw "Nessun progetto SDK-style trovato." }
          Set-Content buildlist.txt ($projects -join "`n")
          Write-Host "Projects to build:`n$(Get-Content buildlist.txt -Raw)"

      - name: Restore
        shell: pwsh
        run: |
          Get-Content buildlist.txt | ForEach-Object { dotnet restore $_ }

      - name: Build (Release)
        shell: pwsh
        run: |
          Get-Content buildlist.txt | ForEach-Object { dotnet build $_ -c Release --no-restore /warnaserror }

      - name: Test + Coverage (Cobertura)
        run: dotnet test -c Release --no-build --logger "trx;LogFileName=testresults.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
        continue-on-error: true  # evita che la pipeline vada rossa se qualche test flake fallisce

      - name: Upload test & coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: |
            **/TestResults/**/*.trx
            **/TestResults/*/coverage.cobertura.xml

