name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  build-test-coverage:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      # ✅ Niente runsettings: raccogliamo le coperture standard
      - name: Test + Coverage
        run: >
          dotnet test
          --configuration Release
          --no-build
          --collect:"XPlat Code Coverage"
          --results-directory TestResults

      - name: Install reportgenerator tool
        run: dotnet tool update --global dotnet-reportgenerator-globaltool

      # ✅ Filtra nel report: includi solo ProgesiCore, escludi logger/legacy
      - name: Generate Coverage Report (HTML + TextSummary)
        shell: pwsh
        run: |
          $reports = Get-ChildItem -Recurse -Path "TestResults" -Filter "coverage.cobertura.xml" | % { $_.FullName }
          if (-not $reports) { Write-Error "Nessun report Cobertura trovato in TestResults"; exit 1 }
          $reportsArg = ($reports -join ";")
          reportgenerator `
            -reports:$reportsArg `
            -targetdir:"CoverageReport" `
            -reporttypes:"Html;TextSummary;Cobertura" `
            -assemblyfilters:"+ProgesiCore" `
            -classfilters:"-*Logger*;-*LegacyExtensions*;-*TraceLogger*"
          if (-not (Test-Path "CoverageReport/Summary.txt")) { Write-Error "Summary.txt non generato"; exit 1 }
          Write-Host "----- Coverage Summary (ProgesiCore only) -----"
          Get-Content "CoverageReport/Summary.txt" | Write-Host

      # Confronto "soft" con baseline (warn-only)
      - name: Compare with baseline (warn-only)
        if: always()
        shell: pwsh
        run: |
          if (-not (Test-Path "CoverageReport/Summary.txt")) { Write-Warning "Summary.txt non trovato"; exit 0 }
          $summary = Get-Content -Raw "CoverageReport/Summary.txt"

          $line   = if ($summary -match 'Line coverage:\s*([\d\.]+)%')   { [double]$Matches[1] } else { 0 }
          $branch = if ($summary -match 'Branch coverage:\s*([\d\.]+)%') { [double]$Matches[1] } else { 0 }
          $method = if ($summary -match 'Method coverage:\s*([\d\.]+)%') { [double]$Matches[1] } else { 0 }

          if (Test-Path "tests/coverage-baseline.json") {
            $baseline = Get-Content -Raw "tests/coverage-baseline.json" | ConvertFrom-Json
            $dLine   = [math]::Round($line   - [double]$baseline.line,   1)
            $dBranch = [math]::Round($branch - [double]$baseline.branch, 1)
            $dMethod = [math]::Round($method - [double]$baseline.method, 1)
            Write-Host ("Δ vs baseline -> line {0:+0.0;-0.0;±0.0} / branch {1:+0.0;-0.0;±0.0} / method {2:+0.0;-0.0;±0.0}" -f $dLine,$dBranch,$dMethod)
          }
          else {
            Write-Warning "Baseline non trovata (tests/coverage-baseline.json), salto il confronto."
          }

      # Gate minimi "blocking"
      - name: Enforce minimum coverage thresholds
        if: always()
        shell: pwsh
        run: |
          if (-not (Test-Path "CoverageReport/Summary.txt")) { Write-Error "Summary.txt non trovato"; exit 1 }
          $s = Get-Content -Raw "CoverageReport/Summary.txt"

          $line   = if ($s -match 'Line coverage:\s*([\d\.]+)%')   { [double]$Matches[1] } else { 0 }
          $branch = if ($s -match 'Branch coverage:\s*([\d\.]+)%') { [double]$Matches[1] } else { 0 }
          $method = if ($s -match 'Method coverage:\s*([\d\.]+)%') { [double]$Matches[1] } else { 0 }

          $minLine = 88.0
          $minBranch = 65.0
          $minMethod = 90.0

          Write-Host ("Thresholds -> Line≥{0} Branch≥{1} Method≥{2}" -f $minLine,$minBranch,$minMethod)

          $ok = ($line -ge $minLine) -and ($branch -ge $minBranch) -and ($method -ge $minMethod)
          if (-not $ok) {
            Write-Error ("Coverage below thresholds: line={0:N1} branch={1:N1} method={2:N1}" -f $line,$branch,$method)
            exit 1
          }
          Write-Host ("OK: {0:N1}/{1:N1}/{2:N1} meet thresholds" -f $line,$branch,$method)

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: CoverageReport
          path: CoverageReport

      - name: Comment coverage summary on PR
        if: github.event_name == 'pull_request'
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if (-not (Test-Path "CoverageReport/Summary.txt")) { Write-Error "Summary.txt non trovato"; exit 1 }
          $s = Get-Content -Raw "CoverageReport/Summary.txt"

          $line   = if ($s -match 'Line coverage:\s*([\d\.]+)%')   { [double]$Matches[1] } else { 0 }
          $branch = if ($s -match 'Branch coverage:\s*([\d\.]+)%') { [double]$Matches[1] } else { 0 }
          $method = if ($s -match 'Method coverage:\s*([\d\.]+)%') { [double]$Matches[1] } else { 0 }

          if (Test-Path "tests/coverage-baseline.json") {
            $baseline = Get-Content -Raw "tests/coverage-baseline.json" | ConvertFrom-Json
          } else {
            $baseline = @{ line = 0.0; branch = 0.0; method = 0.0 } | ConvertTo-Json | ConvertFrom-Json
          }

          $dLine   = [math]::Round($line   - [double]$baseline.line,   1)
          $dBranch = [math]::Round($branch - [double]$baseline.branch, 1)
          $dMethod = [math]::Round($method - [double]$baseline.method, 1)

          function FmtDelta([double]$v) {
            if     ($v -gt 0){ return "+$($v.ToString('0.0'))" }
            elseif ($v -lt 0){ return  $v.ToString('0.0') }
            else  { return "±0.0" }
          }

          $bodyLines = @(
            "### ✅ Coverage summary",
            "",
            ("**Line:**   {0:N1}% ({1} vs baseline {2:N1}%)" -f $line,   (FmtDelta $dLine),   $baseline.line),
            ("**Branch:** {0:N1}% ({1} vs baseline {2:N1}%)" -f $branch, (FmtDelta $dBranch), $baseline.branch),
            ("**Method:** {0:N1}% ({1} vs baseline {2:N1}%)" -f $method, (FmtDelta $dMethod), $baseline.method),
            "",
            "_Report from `CoverageReport/Summary.txt`._"
          )
          $body = $bodyLines -join [Environment]::NewLine

          $path = "pr-comment.md"
          Set-Content -Path $path -Value $body -NoNewline -Encoding UTF8
          gh pr comment $env:PR_NUMBER --body-file $path
