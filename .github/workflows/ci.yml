name: CI

on:
  push:
    branches: [ main, master, develop, chore/**, release/** ]
  pull_request:
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-test:
    name: build-test
    runs-on: windows-latest
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.slnf', '**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Preferisci la slnf della CI se presente, altrimenti la prima .sln
      - name: Choose build target
        id: choose
        shell: pwsh
        run: |
          $slnf = Get-ChildItem -Recurse -Filter Progesi.CI.slnf | Select-Object -First 1
          if ($slnf) { "path=$($slnf.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append }
          else {
            $sln = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
            if (-not $sln) { Write-Error "Nessun .sln/.slnf trovato"; exit 1 }
            "path=$($sln.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Restore
        shell: pwsh
        run: |
          $path = "${{ steps.choose.outputs.path }}"
          $hasLock = @(Get-ChildItem -Recurse -Filter packages.lock.json).Count -gt 0
          if ($hasLock) { dotnet restore "$path" --locked-mode } else { dotnet restore "$path" }

      - name: Format (whitespace only, verify)
        shell: pwsh
        run: dotnet format whitespace "${{ steps.choose.outputs.path }}" --verify-no-changes

      - name: Build (Release)
        shell: pwsh
        run: dotnet build "${{ steps.choose.outputs.path }}" -c Release --no-restore

      - name: Discover & run tests (per project)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $results = Join-Path $PWD 'TestResults'
          New-Item -ItemType Directory -Force -Path $results | Out-Null
          $projs = Get-ChildItem -Recurse -Filter *Tests.csproj | ForEach-Object { $_.FullName }
          Write-Host "Discovered test projects:"; $projs | ForEach-Object { Write-Host " - $_" }
          foreach ($p in $projs) {
            $name = [IO.Path]::GetFileNameWithoutExtension($p)
            Write-Host "==> dotnet test $name"
            dotnet test "$p" -c Release --no-build `
              --collect "XPlat Code Coverage" `
              --logger "trx;LogFileName=$name.trx" `
              --results-directory "$results"
          }

      - name: List TestResults
        shell: pwsh
        run: |
          Write-Host 'Listing TestResults:'; Get-ChildItem -Recurse TestResults | ForEach-Object { Write-Host $_.FullName }
          Write-Host 'Listing coverage.cobertura.xml:'; Get-ChildItem -Recurse -Filter coverage.cobertura.xml TestResults | ForEach-Object { Write-Host $_.FullName }

      - name: ReportGenerator (combine)
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: "**/TestResults/**/coverage.cobertura.xml"
          targetdir: "CoverageReport"
          reporttypes: "Html;TextSummary;Cobertura"
          historydir: "CoverageHistory"
          assemblyfilters: "+ProgesiCore;+ProgesiRepositories.*"
          classfilters: "-*Logger*;-*LegacyExtensions*;-*TraceLogger*"
          tag: "${{ github.run_number }}_${{ github.run_id }}"

      - name: Show summary and gate
        id: gate
        shell: pwsh
        run: |
          $summary = Get-ChildItem -Recurse -Filter 'Summary.txt' -Path 'CoverageReport' | Select-Object -First 1
          if (-not $summary) { Write-Error 'Summary.txt non trovato (ReportGenerator non ha prodotto il TextSummary)'; exit 1 }
          $txt = Get-Content -Raw $summary.FullName
          Write-Host '===== Code Coverage Summary (filtered) ====='
          Write-Host $txt

          # Pubblica nel Job Summary
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '### Code Coverage Summary (filtered)'
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ''
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```text'
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $txt
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value '```'

          # --- GATE TEMPORANEO: 70% ovunque ---
          $threshold = 85
          $line = Select-String -Path $summary.FullName -Pattern 'Line coverage:\s+([0-9\.]+)%' | ForEach-Object { [double]$_.Matches[0].Groups[1].Value }
          Write-Host ("Branch: {0} | Threshold: {1}% | Line coverage: {2}%" -f $env:GITHUB_REF_NAME, $threshold, $line)
          if ($line -lt $threshold) {
            Write-Error ("Coverage gate failed: {0}% < {1}%" -f $line, $threshold)
          }

      - name: Upload CoverageReport
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: CoverageReport

      - name: Upload TestResults
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: TestResults

