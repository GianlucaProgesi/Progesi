name: CI

on:
  push:
    branches:
      - main
      - chore/**
      - feature/**
      - fix/**
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  windows-tests:
    name: CI: Windows x64 tests + coverage
    runs-on: windows-latest

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            6.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Evitiamo di compilare l'intera solution (che includerebbe Rhino/Grasshopper):
      # ripristiniamo e costruiamo SOLO il progetto di test mirato a net48.
      - name: Restore tests
        run: dotnet restore tests/ProgesiCore.Tests/ProgesiCore.Tests.csproj

      - name: Build tests (Release x64)
        run: dotnet build tests/ProgesiCore.Tests/ProgesiCore.Tests.csproj -c Release -p:Platform=x64 --no-restore

      - name: Run tests + coverage (TRX + XPlat)
        run: >
          dotnet test
          tests/ProgesiCore.Tests/ProgesiCore.Tests.csproj
          -c Release
          --no-build
          --collect:"XPlat Code Coverage"
          -l "trx;LogFileName=ProgesiCore.trx"
          --
          RunConfiguration.TargetPlatform=x64

      - name: Upload test results (.trx)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-trx
          path: |
            **/*.trx
            **/TestResults/**/*.trx
          if-no-files-found: warn

      - name: Upload coverage (cobertura/opencover)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            **/TestResults/**/coverage.cobertura.xml
            **/TestResults/**/coverage.opencover.xml
          if-no-files-found: warn

      - name: Generate HTML coverage (reportgenerator)
        if: always()
        shell: pwsh
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          $cov = Get-ChildItem -Path "$PWD" -Recurse -Filter coverage.cobertura.xml | Select-Object -First 1
          if ($cov) {
            reportgenerator -reports:$cov.FullName -targetdir:CoverageReport -reporttypes:Html
          } else {
            Write-Host "No cobertura coverage found; skipping HTML report."
          }

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: CoverageReport/**
          if-no-files-found: warn

      - name: Test Report annotations (dorny)
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "VSTest Results"
          path: |
            **/*.trx
            **/TestResults/**/*.trx
          reporter: dotnet-trx
          fail-on-error: false
