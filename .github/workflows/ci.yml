name: CI

on:
  push:
    branches:
      - main
      - chore/**
      - feature/**
      - fix/**
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  windows-tests:
    name: "CI Windows x64 tests"
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            6.0.x

      - name: Restore tests
        run: dotnet restore tests/ProgesiCore.Tests/ProgesiCore.Tests.csproj

      - name: Build tests (Release)
        run: dotnet build tests/ProgesiCore.Tests/ProgesiCore.Tests.csproj -c Release --no-restore

      # Pulisci output precedenti: evita MultiReport e vecchi Summary
      - name: Clean previous outputs
        shell: pwsh
        run: |
          Get-ChildItem -Path "tests" -Recurse -Directory -Filter "TestResults" -ErrorAction SilentlyContinue |
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          if (Test-Path "CoverageReport") {
            Remove-Item -Recurse -Force "CoverageReport" -ErrorAction SilentlyContinue
          }

      # Test + coverage con controllo runsettings
      - name: Test (TRX + XPlat Coverage, tolerant)
        shell: pwsh
        run: |
          $args = @(
            "test", "tests/ProgesiCore.Tests/ProgesiCore.Tests.csproj",
            "-c", "Release",
            "--no-build",
            "--collect:XPlat Code Coverage",
            "-l", "trx;LogFileName=ProgesiCore.trx"
          )
          if (Test-Path "tests/coverage.runsettings") {
            $args += @("--settings", "tests/coverage.runsettings")
          } else {
            Write-Host "coverage.runsettings non trovato: eseguo senza filtri."
          }
          & dotnet @args
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

      # Genera summary SOLO dal file di coverage più recente
      - name: Generate coverage summary (latest only)
        shell: pwsh
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          $latest = Get-ChildItem -Recurse -File -Filter "coverage.cobertura.xml" | Sort-Object LastWriteTimeUtc -Descending | Select-Object -First 1
          if (-not $latest) { Write-Host "No cobertura coverage found."; exit 0 }
          $rg = (Get-Command reportgenerator -ErrorAction SilentlyContinue)
          if ($null -eq $rg) { $rg = "$env:USERPROFILE\.dotnet\tools\reportgenerator.exe" }
          & $rg -reports:$($latest.FullName) -targetdir:CoverageReport -reporttypes:"TextSummary;HtmlSummary;XmlSummary"

      - name: Show coverage summary in logs and job summary
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "CoverageReport/Summary.txt") {
            Write-Host "=== Coverage Summary (Text) ==="
            Get-Content "CoverageReport/Summary.txt"
            Add-Content $env:GITHUB_STEP_SUMMARY "`n### Code Coverage Summary`n"
            Get-Content "CoverageReport/Summary.txt" | ForEach-Object { Add-Content $env:GITHUB_STEP_SUMMARY $_ }
          } else {
            Write-Host "No Summary.txt found."
          }

      - name: Compare coverage vs baseline (warn-only)
        if: always()
        shell: pwsh
        run: pwsh -File tools/Compare-Coverage.ps1 -BaselinePath "tests/coverage-baseline.json" -WarnOnly

      - name: Upload coverage summary + html
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            CoverageReport/Summary.txt
            CoverageReport/Summary.html
            CoverageReport/CoverageCurrent.json
          if-no-files-found: warn

      - name: Upload test results (.trx) + raw coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-and-raw-coverage
          path: |
            **/*.trx
            **/TestResults/**/coverage.cobertura.xml
            **/TestResults/**/coverage.opencover.xml
          if-no-files-found: warn
