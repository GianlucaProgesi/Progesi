name: CI

on:
  push:
    branches:
      - main
      - master
      - develop
      - release/**
  pull_request:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  build-test-coverage:
    name: build-test-coverage
    runs-on: windows-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDKs (8.x + 7.0.410)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.x
            7.0.410
          cache: true

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.sln', '**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # --- PATCH CHIRURGICA WHITESPACE (Windows) ---
      - name: Normalize line endings (CRLF)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          git config core.autocrlf true
          $patterns = @("*.cs","*.csproj","*.sln","*.props","*.targets")
          Get-ChildItem -Recurse -File -Include $patterns | ForEach-Object {
            $p = $_.FullName
            $txt = Get-Content -Raw -LiteralPath $p
            # Uniforma qualsiasi combinazione di EOL in CRLF
            $txt = $txt -replace "(`r)?`n","`r`n"
            [System.IO.File]::WriteAllText($p, $txt, [System.Text.UTF8Encoding]::new($false))
          }

      - name: dotnet format (autofix)
        shell: pwsh
        run: dotnet format --verbosity minimal

      # Se vuoi far fallire i PR se non formattati, tieni questo step.
      # Altrimenti puoi rimuoverlo.
      - name: dotnet format (verify-only on PR)
        if: github.event_name == 'pull_request'
        shell: pwsh
        run: dotnet format --verify-no-changes --verbosity minimal

      - name: Restore
        shell: pwsh
        run: dotnet restore

      - name: Build
        shell: pwsh
        run: dotnet build --configuration Release --no-restore

      - name: Test (with coverage + runsettings)
        shell: pwsh
        run: >
          dotnet test
          --configuration Release
          --no-build
          --collect:"XPlat Code Coverage"
          --results-directory TestResults
          --settings tests/coverlet.runsettings

      - name: Install ReportGenerator
        shell: pwsh
        run: dotnet tool update -g dotnet-reportgenerator-globaltool

      - name: Add .NET tools to PATH
        shell: pwsh
        run: echo "$env:USERPROFILE\.dotnet\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Generate CoverageReport (Html + TextSummary + Cobertura)
        shell: pwsh
        run: |
          $reports = Get-ChildItem -Recurse -Path "TestResults" -Filter "coverage.cobertura.xml" | % { $_.FullName }
          Write-Host "$(Get-Date -Format o): Arguments"
          Write-Host " -reports:$($reports -join ';')"
          Write-Host " -targetdir:CoverageReport"
          Write-Host " -reporttypes:Html;TextSummary;Cobertura"
          Write-Host " -assemblyfilters:+ProgesiCore"
          Write-Host " -classfilters:-*Logger*;-*LegacyExtensions*;-*TraceLogger*"
          reportgenerator `
            -reports:$($reports -join ';') `
            -targetdir:CoverageReport `
            -reporttypes:Html;TextSummary;Cobertura `
            -assemblyfilters:+ProgesiCore `
            -classfilters:-*Logger*;-*LegacyExtensions*;-*TraceLogger*

      - name: Publish coverage summary to Job Summary
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "CoverageReport/Summary.txt") {
            "## Coverage (ProgesiCore only)`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
            Get-Content -Raw "CoverageReport/Summary.txt" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          } else {
            "Coverage summary non trovato." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          }

      - name: Upload CoverageReport artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: CoverageReport
          if-no-files-found: warn

      - name: Upload TestResults artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: TestResults
          if-no-files-found: warn
