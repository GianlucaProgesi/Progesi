name: release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'   # es: v1.0.26

permissions:
  contents: write
  packages: write

jobs:
  pack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Compute version (if tag)
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VER=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate packlist (src only, skip Grasshopper)
        shell: bash
        run: |
          set -euo pipefail
          find ./src -name '*.csproj' \
            -not -path '*/ProgesiGrasshopperAssembly/*' \
            -print | sort > packlist.txt
          echo "Pack list:" && cat packlist.txt

      - name: Ensure per-project README (CI guard)
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r proj; do
            [[ -z "${proj:-}" ]] && continue
            dir="$(dirname "$proj")"
            if [[ ! -f "$dir/README.md" ]]; then
              name="$(basename "$dir")"
              printf '# %s\n\nCI placeholder README to satisfy NuGet readme requirement.\n' "$name" > "$dir/README.md"
              echo "Created placeholder $dir/README.md"
            fi
          done < packlist.txt

      - name: Pack (by packlist)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./nupkg
          VER="${{ steps.vars.outputs.VER || '' }}"
          while IFS= read -r proj; do
            [[ -z "${proj:-}" ]] && continue
            if [[ -n "${VER:-}" ]]; then
              echo "Packing $proj (Version=$VER)"
              dotnet pack "$proj" -c Release --no-build -o ./nupkg /p:Version="$VER"
            else
              echo "Packing $proj"
              dotnet pack "$proj" -c Release --no-build -o ./nupkg
            fi
          done < packlist.txt
          echo "Produced packages:" && ls -l ./nupkg

      - name: Upload nupkg
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./nupkg/*.nupkg

  release:
    needs: pack
    runs-on: ubuntu-latest
    steps:
      - name: Download nupkg
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Compute version (from tag)
        id: vars
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: echo "VER=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      # --- NuGet.org ----------------------------------------------------------
      - name: Publish to NuGet.org
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push "./nupkg/*.${{ steps.vars.outputs.VER }}.nupkg" \
            --source "https://api.nuget.org/v3/index.json" \
            --api-key "$NUGET_API_KEY" \
            --skip-duplicate

      # --- GitHub Packages: sempre con --api-key (usa GPR_PAT se c'?, altrimenti GITHUB_TOKEN)
      - name: Publish to GitHub Packages (GPR)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          OWNER: ${{ github.repository_owner }}
          TOKEN: ${{ secrets.GPR_PAT != '' && secrets.GPR_PAT || secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          for nupkg in ./nupkg/*.${{ steps.vars.outputs.VER }}.nupkg; do
            echo "? Pushing $(basename "$nupkg") to GPR..."
            dotnet nuget push "$nupkg" \
              --source "https://nuget.pkg.github.com/$OWNER/index.json" \
              --api-key "$TOKEN" \
              --skip-duplicate
          done

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ./nupkg/*.${{ steps.vars.outputs.VER }}.nupkg

