name: release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  pack:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build -c Release --no-restore

      - name: Compute version (from tag)
        id: vars
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "VER=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Generate packlist (src only, skip Grasshopper)
        run: |
          set -euo pipefail
          find ./src -name "*.csproj" \
            -not -path "*/ProgesiGrasshopperAssembly/*" \
            -print | sort > packlist.txt
          echo "Pack list:" && cat packlist.txt

      - name: Ensure per-project README (CI guard)
        run: |
          set -euo pipefail
          while IFS= read -r proj; do
            [ -z "$proj" ] && continue
            dir="$(dirname "$proj")"
            if [ ! -f "$dir/README.md" ]; then
              name="$(basename "$dir")"
              printf '# %s\n\nCI placeholder README to satisfy NuGet readme requirement.\n' "$name" > "$dir/README.md"
              echo "Created placeholder $dir/README.md"
            fi
          done < packlist.txt

      - name: Pack (by packlist)
        run: |
          set -euo pipefail
          mkdir -p ./nupkg
          VER="${{ steps.vars.outputs.VER }}"
          while IFS= read -r proj; do
            [ -z "$proj" ] && continue
            if [ -n "$VER" ]; then
              echo "Packing $proj (Version=$VER)"
              dotnet pack "$proj" -c Release --no-build -o ./nupkg /p:Version="$VER"
            else
              echo "Packing $proj"
              dotnet pack "$proj" -c Release --no-build -o ./nupkg
            fi
          done < packlist.txt
          echo "Produced packages:" && ls -l ./nupkg

      - name: Upload nupkg
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./nupkg/*.nupkg

  publish:
    needs: pack
    runs-on: ubuntu-latest
    steps:
      - name: Download nupkg
        uses: actions/download-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Compute version (from tag)
        id: vars
        if: startsWith(github.ref, 'refs/tags/')
        run: echo "VER=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Choose GitHub Packages token
        run: |
          if [ -n "${{ secrets.GPR_PAT }}" ]; then
            echo "GPR_TOKEN=${{ secrets.GPR_PAT }}" >> $GITHUB_ENV
          else
            echo "GPR_TOKEN=${{ github.token }}" >> $GITHUB_ENV
          fi

      - name: Add GPR source (auth test)
        run: |
          dotnet nuget remove source github 2>/dev/null || true
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --name "github" \
            --username "${{ github.repository_owner }}" \
            --password "$GPR_TOKEN" \
            --store-password-in-clear-text
          dotnet nuget list source
          echo "Pushing *.${{ steps.vars.outputs.VER }}.nupkg ..."

      - name: Publish to GitHub Packages (GPR)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -euo pipefail
          shopt -s nullglob
          for nupkg in ./nupkg/*.${{ steps.vars.outputs.VER }}.nupkg; do
            echo "-> Pushing $(basename "$nupkg") to GPR..."
            dotnet nuget push "$nupkg" --source "github" --api-key "$GPR_TOKEN" --skip-duplicate
          done
          echo "Done."

      - name: Publish to NuGet.org (optional)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if [ -n "$NUGET_API_KEY" ]; then
            set -euo pipefail
            shopt -s nullglob
            for nupkg in ./nupkg/*.${{ steps.vars.outputs.VER }}.nupkg; do
              echo "-> Pushing $(basename "$nupkg") to NuGet.org..."
              dotnet nuget push "$nupkg" --source "https://api.nuget.org/v3/index.json" --api-key "$NUGET_API_KEY" --skip-duplicate
            done
          else
            echo "NUGET_API_KEY not set; skipping NuGet.org publish."
          fi

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ./nupkg/*.${{ steps.vars.outputs.VER }}.nupkg
